[{"path":"https://shubhra-opensource.github.io/LMD/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://shubhra-opensource.github.io/LMD/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://shubhra-opensource.github.io/LMD/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://shubhra-opensource.github.io/LMD/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://shubhra-opensource.github.io/LMD/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://shubhra-opensource.github.io/LMD/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://shubhra-opensource.github.io/LMD/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://shubhra-opensource.github.io/LMD/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://shubhra-opensource.github.io/LMD/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://shubhra-opensource.github.io/LMD/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://shubhra-opensource.github.io/LMD/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"abstract","dir":"Articles","previous_headings":"","what":"Abstract","title":"Getting Started with LMD","text":"R package LMD introduced work, based local mean decomposition, iterative self-adaptive approach demodulating, processing, analyzing multi-component amplitude-modulated () frequency modulated (FM) signals. complex signal can decomposed product functions (PFs) using LMD, PF product envelope signal purely frequency modulated signal (FM). LMD method can used broad variety natural signals, including electrocardiograms seismic data. addition, equipment fault vibration signals frequently multi-component modulation signals, LMD may used identify faults gears, roller bearings, rotating machinery. LMD package includes utilities calculating extreme points moving averages. LMD package includes functions finding extreme points, moving average smoothing, checking monotonicity, extracting mean envelope signals, extracting product functions graphical display results. vignette cover mentioned functions experimental analysis simulated signal show validity LMD method.","code":""},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with LMD","text":"Rotating machines widely used many sectors susceptible wide range failures, particularly working tough time-varying situations. Early discovery faults critical; otherwise, may result significant economic loss, catastrophe. result, development effective defect diagnostic techniques critical safety improved maintenance decision making rotating equipment applications. many feature extraction techniques available today detection rotating machinery faults, frequency/spectrum analysis, time/statistical analysis, time-frequency analysis, . However, approaches described applicable mono-component modulation signals, also perform well non-stationary signals.   Signals acquired machines frequency machine component interest, also interference frequencies neighboring components environmental disturbances. phenomena amplitude modulation, frequency modulation, phase modulation also frequent signals. Furthermore, rotating machines frequently operate time-varying speed load circumstances, causing signals obtained non-linear. failure starts developing machines, fault signature difficult identify owing interferences indicated .   Adaptive mode decomposition approaches work well non-stationary time series data. procedures need prior understanding signals good capturing local features signal, malfunction indication. LMD also adaptive technique can decompose complex multi-component signal series product functions (PFs) .","code":""},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"lmd","dir":"Articles","previous_headings":"","what":"LMD","title":"Getting Started with LMD","text":"multi-component signal can broken constituent PFs residue. PF mono component result envelope signal frequency modulated signal. LMD two-tier method utilized perform demodulation .First, inner cycle used conduct thorough computation PF. Second, outer cycle, signal decomposed depending iterations. following sections methods broken steps LMD technique requires complete analysis given signal x(t). Consider following synthetic signal \\(x (t)\\) form :  \\[x ( t ) = 0.25t + sin ( πt ) + sin ( 2πt ) + sin ( 6πt )\\] signal represented graphical form :","code":"fs <- 2000 #Sampling Frequency time_component <- seq(from = 0, to = 9, by = 1 / fs) # Simulated Signal signal <- (0.25 * time_component + sin(pi * time_component) + sin(2 * pi * time_component) +       sin(6 * pi * time_component))  dummy_df <- data.frame(Time = time_component, Value = signal)  p1 <- ggplot(dummy_df) +   aes(x = Time, y = Value) +   geom_spline(size = 2, colour = \"#1D2B71\") +   scale_color_hue() +   labs(title = \"Fig 1. Sample Signal\") +   theme_minimal() +   theme(legend.position = \"none\")  plot(p1)"},{"path":[]},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"step-1","dir":"Articles","previous_headings":"LMD > Steps for PF Extraction","what":"Step 1","title":"Getting Started with LMD","text":"first step, local extrema \\(n_i\\) extracted original signal \\(x(t)\\). extreme values signal can found using find_extrema function LMD. find_extrema function expects following parameters: signal: Signal vector numeric values include_endpoints: logical value indicating whether include end points . Default value set TRUE. function returns indexes extreme values. chunk extreme values original sample signal x(t) indicated red color.","code":"LMD::find_extrema(signal) extreme_values <- LMD::find_extrema(signal)  p2 <- ggplot() +   geom_spline(     data = dummy_df,     aes(x = Time, y = Value),     size = 2,     colour = \"#1D2B71\"   ) +   geom_point(aes(x = dummy_df$Time[extreme_values], y = dummy_df$Value[extreme_values]),              size = 5,              colour = \"red\") +   scale_color_hue() +   labs(title = \"Fig 2. Sifting Process: (1)\") +   theme_minimal() +   theme(legend.position = \"none\")  plot(p2)"},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"step-2","dir":"Articles","previous_headings":"LMD > Steps for PF Extraction","what":"Step 2","title":"Getting Started with LMD","text":"second step mean value \\(m_i\\) calculated taking average current extrema \\(n_i\\) next extrema \\(n_{+1}\\). \\(i_{th}\\) mean value \\(m_i\\) two successive extrema \\(n_i\\) \\(n_{+1}\\) given : \\[ \\begin{aligned} &m_i = {\\frac{n_i+n_{+1}}{2}} \\\\ \\end{aligned} \\] mean values \\(m_i\\) two successive extreme connected straight lines, shown :  local mean function \\(m_{11}(t)\\) derived taking moving weighted average means \\(m_i\\).  Similarly envelope value\\(a_i\\) given : \\[ \\begin{aligned} &a_i = {\\frac{|n_i-n_{+1}|}{2}} \\\\ \\end{aligned} \\]  envelope values \\(a_i\\) smoothed using weighted moving average envelope function \\(a_{11}\\)(t) formed.  local mean envelope corresponding smoothed values can found using local_mean_and_envelope function LMD. local_mean_and_envelope function expects following parameters: signal: Signal vector numeric values extrema: vector numeric values indexes extreme values signal function returns local mean, moving averaged local mean, envelope moving averaged local envelope values.","code":"extreme_values <- LMD::find_extrema(signal) ma_enve = local_mean_and_envelope(signal, extreme_values) mean = ma_enve$mean  p3 <- ggplot() +   geom_spline(     data = dummy_df,     aes(x = Time, y = Value),     size = 2,     colour = \"#1D2B71\",     alpha = 0.5   ) +   geom_point(     aes(x = dummy_df$Time[extreme_values], y = dummy_df$Value[extreme_values]),     size = 5,     colour = \"red\",     alpha = 0.5   ) +   geom_line(aes(x = dummy_df$Time, y = mean),             size = 1,             colour = \"red\") +   scale_color_hue() +   labs(title = \"Fig 3. Sifting Process: (2.1)\") +   theme_minimal() +   theme(legend.position = \"none\")  plot(p3) ma = ma_enve$ma  p4 <- ggplot() +   geom_spline(     data = dummy_df,     aes(x = Time, y = Value),     size = 2,     colour = \"#1D2B71\",     alpha = 0.5   ) +   geom_point(     aes(x = dummy_df$Time[extreme_values], y = dummy_df$Value[extreme_values]),     size = 5,     colour = \"red\",     alpha = 0.5   ) +   geom_line(aes(x = dummy_df$Time, y = ma),             size = 1,             colour = \"red\") +   scale_color_hue() +   labs(title = \"Fig 4. Sifting Process: (2.2) \") +   theme_minimal() +   theme(legend.position = \"none\")  plot(p4) envelope = ma_enve$enve Time=dummy_df$Time  p5 <- ggplot() +   geom_line(aes(x = Time, y = envelope),             size = 1,             colour = \"red\") +   scale_color_hue() +   labs(title = \"Fig 5. Sifting Process: (2.3)\") +   theme_minimal() +   theme(legend.position = \"none\")  plot(p5) enve_sm = ma_enve$enve_sm Time=dummy_df$Time p6 <- ggplot() +     geom_line(aes(x = Time, y = envelope),             size = 0.5,             colour = \"red\",alpha=0.5) +   geom_line(aes(x = Time, y = enve_sm),             size = 1,             colour = \"red\") +   scale_color_hue() +   labs(title = \"Fig 6. Sifting Process: (2.4) \") +   theme_minimal() +   theme(legend.position = \"none\")  plot(p6) LMD::local_mean_and_envelope(signal, extrema)"},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"step-3","dir":"Articles","previous_headings":"LMD > Steps for PF Extraction","what":"Step 3","title":"Getting Started with LMD","text":"step 3 calculate zero-mean signal \\(h_{11}\\)(t) taking difference original signal \\(x(t)\\) local mean function \\(m_{11}\\)(t) : \\[ \\begin{aligned} &h_{11}(t) = {x(t)-m_{11}(t)} \\\\ \\end{aligned} \\]","code":""},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"step-4","dir":"Articles","previous_headings":"LMD > Steps for PF Extraction","what":"Step 4","title":"Getting Started with LMD","text":", frequency modulated signal \\(s_{11}\\)(t) calculated : \\[ \\begin{aligned} &s_{11}(t) = {h_{11}(t)/a_{11}(t)} \\\\ \\end{aligned}  \\]","code":""},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"step-5","dir":"Articles","previous_headings":"LMD > Steps for PF Extraction","what":"Step 5","title":"Getting Started with LMD","text":"Repeat steps 1 3 get envelope value \\(a_{12}\\)(t) \\(s_{11}\\)(t) . checkpoint inner loop, envelope function \\(a_{12}\\)(t) equal 1, inner iteration stopped \\(s_{12}\\)(t) considered first purely frequency modulated (FM) signal. Else, \\(s_{11}\\)(t) considered original signal Steps 1 4 repeated n times condition \\(a_{1(n+1)}\\)(t)=1 satisfied signal \\(s_{1(n)}\\)(t).","code":""},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"step-6","dir":"Articles","previous_headings":"LMD > Steps for PF Extraction","what":"Step 6","title":"Getting Started with LMD","text":"Calculate envelope signal \\(a_1\\)(t) first PF1 , multiply smoothed local envelopes iterations: \\[ \\begin{aligned} & a_1(t) = a_{11}(t) * a_{12}(t)*a_{13}(t)\\dotso a_{1n}(t)  \\\\ \\end{aligned} \\]","code":""},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"step-7","dir":"Articles","previous_headings":"LMD > Steps for PF Extraction","what":"Step 7","title":"Getting Started with LMD","text":"Compute first \\(PF_1\\) using \\(a_{1}(t)\\) \\(s_{1n}(t)\\): \\[\\begin{aligned} & PF_1 = a_{1}(t)s_{1n}(t)  \\\\ \\end{aligned} \\] Now residual signal given \\(u_1(t)\\) = \\(x(t)\\)-\\(PF_1(t)\\) . residual \\(u_1(t)\\) considered original signal steps repeated n times \\(u_n(t)\\) contain oscillation. called outer loop LMD. Finally, signal x(n) represented sum PFs residual signal: \\[\\begin{aligned} & x(n) = \\sum^q_{=1}PF_i(n)+u_q(n)  \\\\ \\end{aligned} \\] LMD method can applied signal using lmd function LMD Package. lmd function expects following parameters: signal: Signal vector numeric values include_endpoints: boolean value indicating whether treat endpoint signal pseudo-extreme point max_smooth_iteration: integer value maximum number iterations moving average algorithm max_envelope_iteration: integer value maximum number iterations separating local envelope signals envelope_epsilon: float value terminate processing obtaining pure FM signal convergence_epsilon: float value terminate processing modulation signal converges max_num_pf: integer value maximum number PFs generated function returns PF residual value list.","code":"LMD::lmd(signal)"},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"flowchart-of-lmd","dir":"Articles","previous_headings":"LMD","what":"Flowchart of LMD","title":"Getting Started with LMD","text":"flowchart LMD method presented figure better understanding. Figure 7: Flowchart LMD","code":""},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"analysis-of-a-simulated-signal","dir":"Articles","previous_headings":"","what":"Analysis of a simulated signal","title":"Getting Started with LMD","text":"section take simulated multi-component –FM signal x(t) apply LMD method . time duration signal 600s sampling frequency 1 Hz. \\[ \\begin{align*} x(t) &= x_1(t) + x_2(t) \\\\ x_1(t) &= [(1+0.5cos(πt/100))](cos(πt/2+2cos(πt/50))) \\\\ x_2(t) &= 4sin(πt/2500)sin(6πt/50) \\end{align*} \\] plot shows time domain waveform \\(x(t)\\), \\(x_1(t)\\) \\(x_2(t)\\) respectively.  lmd function applied decompose simulation signal x(t) selecting max_num_pf 2. decomposition results presented plot using plot_lmd function. plot_lmd function expects following parameters: lmd_obj: LMD object created LMD function max_pf: Number PFs Plot show_residue: Whether plot residue signal pricolor_plot: Line color plots line_size_plot: Size line ggplot function returns combined plot PF residual values.  plot product functions residual signal obtained decomposition original signal shown. first product function PF1(t) corresponds constituent x1(t) second product function PF2 signal close original constituent x2(t). PF1(t) PF2(t) close similar x1(t) x2(t), respectively. However, residue signal contains abnormal peaks, corresponding disturbances can seen PFs well, shows demodulation close perfect. next section address imperfections.","code":"t=0:600 x1=(1+0.5*cos(pi*t/100))*(cos(pi*t/2+2*cos(pi*t/50))) x2=4*sin(pi*t/2500)*sin(6*pi*t/50) y=x1+x2  Time=t combined_signal=y  p7 <- ggplot() +   ggplot2::geom_line(aes(x = Time, y = combined_signal),                      size = 1,                      colour = \"midnightblue\") +   ggplot2::ylab(\"Combined Signal x(t)\") +    ggplot2::theme_bw() +   ggplot2::theme(     panel.border = ggplot2::element_rect(size = 0.1),     legend.position = c(0.8, 0.8),     panel.grid.major.x = ggplot2::element_blank()   ) #> Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0. #> ℹ Please use the `linewidth` argument instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated.  p8 <- ggplot() +   ggplot2::geom_line(aes(x = Time, y = x1),                      size = 1,                      colour = \"midnightblue\") +   ggplot2::ylab(\"x1(t)\") +    ggplot2::theme_bw() +   ggplot2::theme(     panel.border = ggplot2::element_rect(size = 0.1),     legend.position = c(0.8, 0.8),     panel.grid.major.x = ggplot2::element_blank()   )  p9 <- ggplot() +   ggplot2::geom_line(aes(x = Time, y = x2),                      size = 1,                      colour = \"midnightblue\") +   ggplot2::ylab(\"x2(t)\") +    ggplot2::theme_bw() +   ggplot2::theme(     panel.border = ggplot2::element_rect(size = 0.1),     legend.position = c(0.8, 0.8),     panel.grid.major.x = ggplot2::element_blank()   )  print((p7/p8/p9)+      plot_annotation(title = \"Fig 8. Simulated Signal\")) lmd_object=LMD::lmd(combined_signal,max_num_pf=2) PF1=lmd_object[[\"pf\"]][[1]] PF2=lmd_object[[\"pf\"]][[2]] residual_signal=lmd_object[[\"residue\"]] plot_lmd(lmd_object)+      plot_annotation(title = \"Fig 9. LMD Decompsition of Simulated Signal\")"},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"drawbacks-of-lmd","dir":"Articles","previous_headings":"","what":"Drawbacks of LMD","title":"Getting Started with LMD","text":"LMD shows great capability demodulating amplitude frequency modulated signals. may, noticeably flawed. inadequacies, namely end effects mode mixing. better understanding, imperfections highlighted plot received step(Fig 9). Fig. 10, look closely ends residual signal, can notice first last value deviating lot rest signal, effect visible PFs also. peculiarity known end effect LMD. Furthermore, can see deviations around 500 s. called mode mixing LMD. mitigate issues, several variations LMD (like RLMD,IELMD,OLMD etc) proposed researchers, however, methods included package. Figure 10: Drawbacks LMD","code":""},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"applications","dir":"Articles","previous_headings":"","what":"Applications","title":"Getting Started with LMD","text":"Fault diagnosis rotating machinery Decomposition EEG Signal","code":""},{"path":"https://shubhra-opensource.github.io/LMD/articles/Getting_Started_with_LMD.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Getting Started with LMD","text":"D. Kim H.-S. Oh, “EMD: package empirical mode decomposition Hilbert spectrum,” R Journal, 01-Jun-2009. [Online]. Available: https://journal.r-project.org/articles/RJ-2009-002/. [Accessed: 17-Sep-2022]. J. Cheng, Y. Yang, Y. Yang, “rotating machinery fault diagnosis method based local mean decomposition,” Digital Signal Processing, 19-Oct-2011. [Online]. Available: https://www.sciencedirect.com/science/article/pii/S1051200411001448. [Accessed: 17-Sep-2022]. “Review local mean decomposition application fault diagnosis rotating machinery,” IEEE Xplore. [Online]. Available: https://ieeexplore.ieee.org/document/8820748. [Accessed: 17-Sep-2022]. Y. Li, M. Xu, Z. Haiyang, Y. Wei, W. Huang, “new rotating machinery fault diagnosis method based improved local mean decomposition,” Digital Signal Processing, 08-Jul-2015. [Online]. Available: https://www.sciencedirect.com/science/article/pii/S1051200415002213. [Accessed: 17-Sep-2022]. Z. Liu, Y. Jin, M. J. Zuo, Z. Feng, “Time-frequency representation based robust local mean decomposition multicomponent -FM signal analysis,” Mechanical Systems Signal Processing, 10-Apr-2017. [Online]. Available: https://www.sciencedirect.com/science/article/pii/S0888327017301619. [Accessed: 17-Sep-2022].","code":""},{"path":"https://shubhra-opensource.github.io/LMD/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shubhra Prakash. Translator, author, maintainer.","code":""},{"path":"https://shubhra-opensource.github.io/LMD/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Prakash S (2023). LMD: Self-Adaptive Approach Demodulating Multi-Component Signal. https://github.com/shubhra-opensource/LMD, https://shubhra-opensource.github.io/LMD/.","code":"@Manual{,   title = {LMD: A Self-Adaptive Approach for Demodulating Multi-Component Signal},   author = {Shubhra Prakash},   year = {2023},   note = {https://github.com/shubhra-opensource/LMD, https://shubhra-opensource.github.io/LMD/}, }"},{"path":"https://shubhra-opensource.github.io/LMD/index.html","id":"lmd","dir":"","previous_headings":"","what":"A Self-Adaptive Approach for Demodulating Multi-Component Signal","title":"A Self-Adaptive Approach for Demodulating Multi-Component Signal","text":"Self-Adaptive Approach Demodulating Multi-Component Signal Local Mean Decomposition iterative self-adaptive approach demodulating, processing, analyzing multi-component amplitude modulated frequency modulated signals. R package based approach suggested Smith (2005) <doi:10.1098/rsif.2005.0058\\> ‘Python’ library ‘PyLMD’.","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/extract_product_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Product Function — extract_product_function","title":"Extract Product Function — extract_product_function","text":"Method extracting product functions","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/extract_product_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Product Function — extract_product_function","text":"","code":"extract_product_function(   signal,   max_envelope_iteration = 200,   envelope_epsilon = 0.01,   convergence_epsilon = 0.01 )"},{"path":"https://shubhra-opensource.github.io/LMD/reference/extract_product_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Product Function — extract_product_function","text":"signal Signal values (Numeric | vector) max_envelope_iteration Maximum number iterations separating local envelope signals (Integer) envelope_epsilon Terminate processing obtaining pure FM signal (Double) convergence_epsilon Terminate processing modulation signal converges (Double)","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/extract_product_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Product Function — extract_product_function","text":"Product Function","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/extract_product_function.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract Product Function — extract_product_function","text":"https://pypi.org/project/PyLMD/","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/extract_product_function.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract Product Function — extract_product_function","text":"Shubhra Prakash, shubhraprakash279@gmail.com","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/extract_product_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Product Function — extract_product_function","text":"","code":"x=1:100 y = (2 / 3 )* sin(x * 30) + (2 / 3) * sin(x * 17.5) + (4 / 5) *cos(x * 2) plot(y,type=\"l\")  pf=extract_product_function(y)"},{"path":"https://shubhra-opensource.github.io/LMD/reference/find_extrema.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Extreme Points — find_extrema","title":"Find Extreme Points — find_extrema","text":"Method finding Extreme Points","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/find_extrema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Extreme Points — find_extrema","text":"","code":"find_extrema(signal, include_endpoints = TRUE)"},{"path":"https://shubhra-opensource.github.io/LMD/reference/find_extrema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Extreme Points — find_extrema","text":"signal Signal values (Numeric | vector) include_endpoints whether include end points (Boolean)","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/find_extrema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Extreme Points — find_extrema","text":"Indexes extrema values (including starting ending points)","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/find_extrema.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Extreme Points — find_extrema","text":"local extrema point maximum minimum value function open interval containing point obtained.","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/find_extrema.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find Extreme Points — find_extrema","text":"Shubhra Prakash, shubhraprakash279@gmail.com","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/find_extrema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Extreme Points — find_extrema","text":"","code":"signal=c( 0.841471 ,0.9092974,0.14112,-0.7568025,-0.9589243) find_extrema(signal) #> [1] 1 2 5"},{"path":"https://shubhra-opensource.github.io/LMD/reference/is_monotonous.html","id":null,"dir":"Reference","previous_headings":"","what":"Monotonicity Check — is_monotonous","title":"Monotonicity Check — is_monotonous","text":"Method checking signal increasing decreasing monotonously","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/is_monotonous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monotonicity Check — is_monotonous","text":"","code":"is_monotonous(signal)"},{"path":"https://shubhra-opensource.github.io/LMD/reference/is_monotonous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monotonicity Check — is_monotonous","text":"signal Signal values (Numeric | vector)","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/is_monotonous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monotonicity Check — is_monotonous","text":"Boolean","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/is_monotonous.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monotonicity Check — is_monotonous","text":"monotonic signal function keeps increasing decreasing domain variable proceeds.#'","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/is_monotonous.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Monotonicity Check — is_monotonous","text":"https://pypi.org/project/PyLMD/","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/is_monotonous.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Monotonicity Check — is_monotonous","text":"Shubhra Prakash, shubhraprakash279@gmail.com","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/is_monotonous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monotonicity Check — is_monotonous","text":"","code":"x=1:100 is_monotonous(x) #> [1] TRUE"},{"path":"https://shubhra-opensource.github.io/LMD/reference/lmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Mean Decomposition — lmd","title":"Local Mean Decomposition — lmd","text":"Method finding Product Functions (PFs)","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/lmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Mean Decomposition — lmd","text":"","code":"lmd(   signal,   include_endpoints = TRUE,   max_smooth_iteration = 12,   max_envelope_iteration = 200,   envelope_epsilon = 0.01,   convergence_epsilon = 0.01,   max_num_pf = 8 )"},{"path":"https://shubhra-opensource.github.io/LMD/reference/lmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Mean Decomposition — lmd","text":"signal Signal values (Numeric | vector) include_endpoints Whether treat endpoint signal pseudo-extreme point (Boolean) max_smooth_iteration Maximum number iterations moving average algorithm (Integer) max_envelope_iteration Maximum number iterations separating local envelope signals (Integer) envelope_epsilon Terminate processing obtaining pure FM signal (Double) convergence_epsilon Terminate processing modulation signal converges (Double) max_num_pf maximum number PFs generated(Integer)","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/lmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Mean Decomposition — lmd","text":"list(pf,residue) | PFs:decompose functions arranged high frequency low frequency | residue:residual component","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/lmd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local Mean Decomposition — lmd","text":"LMD method decomposing signal Product Functions (PFs) based algorithm presented Jonathan S. Smith. local mean decomposition application EEG perception data. Journal Royal Society Interface, 2005, 2(5):443-454","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/lmd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Local Mean Decomposition — lmd","text":"https://pypi.org/project/PyLMD/","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/lmd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Mean Decomposition — lmd","text":"Shubhra Prakash, shubhraprakash279@gmail.com","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/lmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Mean Decomposition — lmd","text":"","code":"x=1:100 y = (2 / 3 )* sin(x * 30) + (2 / 3) * sin(x * 17.5) + (4 / 5) *cos(x * 2) plot(y,type=\"l\")  lmd(y) #> $pf #> $pf[[1]] #>   [1] -1.76564295 -1.14741909  1.71676319  0.65380322 -1.36306170 -0.19503684 #>   [7]  0.82203177  0.89904663  1.05210311 -0.56874240 -1.25002462  1.27300660 #>  [13]  1.41097333 -1.26221439 -0.78475830  1.02719097  0.61513174  0.32112846 #>  [19] -0.10456166 -1.18269150  0.22491213  1.50323528 -0.72262683 -1.36688328 #>  [25]  0.77474499  0.65088344 -0.30480424  0.17134563 -0.39287448 -0.50062777 #>  [31]  1.04113666  0.18619356 -1.30403436  0.34728771  0.95773187 -0.60940802 #>  [37] -0.17839391  0.41580468 -0.50355018  0.16922911  0.69173974 -0.79468078 #>  [43] -0.41208422  0.80048565 -0.47687538 -0.68900800  0.69270340 -0.16953484 #>  [49] -0.71763963  0.70960621  0.28158331 -0.58804478  0.47111217  0.20499907 #>  [55] -0.55126107  0.78267374  0.53192077 -1.12099717  0.11278100  1.06702570 #>  [61] -0.55945812 -0.57178242  0.30091135 -0.27421108  0.27557155  0.67832924 #>  [67] -1.12345090 -0.70708319  1.50962997  0.34243961 -1.16547039  0.04669490 #>  [73]  0.31894176 -0.08517476  0.31437416 -0.72739535 -1.09254203  1.34156606 #>  [79]  1.26481815 -1.37044913 -0.69048601  1.15993465  0.63094325  0.13120706 #>  [85] -0.43456742 -1.25347509  0.51543719  1.59670085 -1.08333316 -1.58807017 #>  [91]  1.17722289  1.17780269 -0.53152671 -0.79240936 -1.05023779 -0.17062331 #>  [97]  1.52128156 -0.04269183 -1.50075828  1.25247132 #>  #> $pf[[2]] #>   [1] -0.023598746  0.011540430  0.104002403  0.139829499 -0.012266744 #>   [6] -0.198770790 -0.244593717 -0.217420851 -0.192531584 -0.125315046 #>  [11]  0.030706642  0.176842483  0.167971121  0.014624520 -0.126480018 #>  [16] -0.153574702 -0.133793217 -0.134463660 -0.094706696  0.040684061 #>  [21]  0.142850881  0.093993065 -0.025782183 -0.084495442  0.004643535 #>  [26]  0.092090481 -0.030115827 -0.142805218 -0.020382131  0.158582374 #>  [31]  0.090378354 -0.066644115 -0.114851095 -0.054102787  0.067481724 #>  [36]  0.076217486 -0.024423551 -0.056678072  0.000809861  0.034208894 #>  [41] -0.006661900 -0.044204363 -0.017585166  0.053620918  0.113273694 #>  [46]  0.102503058  0.039568385 -0.011994149 -0.033528849 -0.037628209 #>  [51] -0.051214498 -0.085204941 -0.088208506 -0.021579901  0.048818370 #>  [56]  0.007868271 -0.085332199 -0.078389027  0.004081704  0.103592413 #>  [61]  0.113134083 -0.029541220 -0.088077098  0.029830060  0.084442096 #>  [66] -0.031994340 -0.077663554  0.028109760  0.089980546  0.035944158 #>  [71] -0.138888344 -0.186659959  0.064814999  0.222351282  0.093344060 #>  [76] -0.136707986 -0.094412081  0.064554079  0.074413772 -0.037221986 #>  [81] -0.134726305 -0.130638480 -0.087107105 -0.077132377 -0.034486892 #>  [86]  0.108043782  0.214085911  0.148846714 -0.005285647 -0.169203533 #>  [91] -0.239616712 -0.104736402  0.078703574  0.188751584  0.337560047 #>  [96]  0.432796859  0.283012841 -0.028444604 -0.368281113 -0.589854669 #>  #> $pf[[3]] #>   [1]  0.1636448382  0.1407318063  0.0849717254  0.0096142501 -0.0539709648 #>   [6] -0.0934449226 -0.1195657947 -0.1367795391 -0.1420832966 -0.1368547174 #>  [11] -0.1234619662 -0.1001291257 -0.0680498619 -0.0354435355 -0.0078518650 #>  [16]  0.0157320727  0.0345377652  0.0454906706  0.0515115211  0.0602505420 #>  [21]  0.0727060273  0.0791082066  0.0693982851  0.0440026943  0.0117867487 #>  [26] -0.0166523789 -0.0310191156 -0.0260152705 -0.0074680251  0.0120984021 #>  [31]  0.0223701807  0.0184122336  0.0026321216 -0.0153733675 -0.0268993975 #>  [36] -0.0316708705 -0.0346125221 -0.0369268159 -0.0334587047 -0.0192527094 #>  [41]  0.0050911501  0.0342698285  0.0581703864  0.0658709907  0.0568311841 #>  [46]  0.0424352467  0.0333627104  0.0305702356  0.0297370439  0.0271902134 #>  [51]  0.0178508534 -0.0045022184 -0.0370071795 -0.0655093235 -0.0775134817 #>  [56] -0.0692724369 -0.0449144280 -0.0158154453  0.0073847645  0.0249213782 #>  [61]  0.0410171726  0.0529470386  0.0559404527  0.0507598563  0.0408356975 #>  [66]  0.0272715431  0.0092192771 -0.0137102680 -0.0381731651 -0.0527559615 #>  [71] -0.0421654309 -0.0025483896  0.0495585103  0.0877727354  0.0931514822 #>  [76]  0.0606747292  0.0013983995 -0.0603225724 -0.0991248851 -0.1024894181 #>  [81] -0.0765192026 -0.0405703986 -0.0136662900 -0.0006005832  0.0055432040 #>  [86]  0.0113671929  0.0186026947  0.0262220836  0.0355964432  0.0521829269 #>  [91]  0.0779350672  0.1057411489  0.1245770695  0.1207650470  0.0777758196 #>  [96] -0.0024027934 -0.0848834589 -0.1347479666 -0.1513031094 -0.1535547653 #>  #> $pf[[4]] #>   [1]  3.512567e-02  3.511196e-02  3.506123e-02  3.486016e-02  3.422426e-02 #>   [6]  3.263504e-02  2.943046e-02  2.409024e-02  1.662801e-02  7.800724e-03 #>  [11] -1.088686e-03 -8.739442e-03 -1.440790e-02 -1.811400e-02 -2.043011e-02 #>  [16] -2.205072e-02 -2.340039e-02 -2.439870e-02 -2.442176e-02 -2.253740e-02 #>  [21] -1.805033e-02 -1.114241e-02 -3.119653e-03  4.043408e-03  8.618381e-03 #>  [26]  9.872133e-03  8.220267e-03  4.823179e-03  9.613689e-04 -2.430330e-03 #>  [31] -4.882766e-03 -6.232781e-03 -6.411139e-03 -5.361813e-03 -3.135042e-03 #>  [36] -2.546508e-05  3.415309e-03  6.544925e-03  8.834389e-03  9.942167e-03 #>  [41]  9.669209e-03  7.958374e-03  5.021922e-03  1.459757e-03 -1.836589e-03 #>  [46] -4.023014e-03 -4.667100e-03 -3.883008e-03 -2.184625e-03 -2.182343e-04 #>  [51]  1.435594e-03  2.345092e-03  2.269472e-03  1.212215e-03 -5.599558e-04 #>  [56] -2.600661e-03 -4.456202e-03 -5.805903e-03 -6.460150e-03 -6.242597e-03 #>  [61] -4.914677e-03 -2.276006e-03  1.611686e-03  6.315370e-03  1.121783e-02 #>  [66]  1.591027e-02  2.044977e-02  2.520708e-02  3.037130e-02  3.549086e-02 #>  [71]  3.947426e-02  4.112673e-02  3.987738e-02  3.615733e-02  3.116084e-02 #>  [76]  2.617248e-02  2.196055e-02  1.861669e-02  1.584761e-02  1.338796e-02 #>  [81]  1.120812e-02  9.446458e-03  8.223184e-03  7.523781e-03  7.208907e-03 #>  [86]  7.078620e-03  6.884049e-03  6.250269e-03  4.594101e-03  1.193442e-03 #>  [91] -4.507889e-03 -1.248026e-02 -2.188288e-02 -3.128370e-02 -3.925193e-02 #>  [96] -4.495255e-02 -4.835946e-02 -5.003143e-02 -5.065572e-02 -5.085826e-02 #>  #> $pf[[5]] #>   [1] -3.707549e-02 -3.706642e-02 -3.705204e-02 -3.703042e-02 -3.699792e-02 #>   [6] -3.694988e-02 -3.688552e-02 -3.680141e-02 -3.669202e-02 -3.654852e-02 #>  [11] -3.635577e-02 -3.609014e-02 -3.571585e-02 -3.518388e-02 -3.443150e-02 #>  [16] -3.338568e-02 -3.196984e-02 -3.011376e-02 -2.776442e-02 -2.489705e-02 #>  [21] -2.152336e-02 -1.769326e-02 -1.349269e-02 -9.034408e-03 -4.446590e-03 #>  [26]  1.398397e-04  4.602625e-03  8.836061e-03  1.275535e-02  1.629894e-02 #>  [31]  1.942688e-02  2.211800e-02  2.436622e-02  2.617298e-02  2.753981e-02 #>  [36]  2.845883e-02  2.890508e-02  2.883502e-02  2.819153e-02  2.692093e-02 #>  [41]  2.499745e-02  2.244430e-02  1.934788e-02  1.585299e-02  1.214212e-02 #>  [46]  8.405890e-03  4.814912e-03  1.500334e-03 -1.452094e-03 -3.998885e-03 #>  [51] -6.129299e-03 -7.854350e-03 -9.196665e-03 -1.018243e-02 -1.083563e-02 #>  [56] -1.117411e-02 -1.120816e-02 -1.094166e-02 -1.037677e-02 -9.520913e-03 #>  [61] -8.394227e-03 -7.036619e-03 -5.509931e-03 -3.895741e-03 -2.286855e-03 #>  [66] -7.765257e-04  5.530770e-04  1.640561e-03  2.449783e-03  2.971359e-03 #>  [71]  3.219860e-03  3.227894e-03  3.039997e-03  2.706388e-03  2.276257e-03 #>  [76]  1.795293e-03  1.300984e-03  8.226668e-04  3.810767e-04 -1.149459e-05 #>  [81] -3.489604e-04 -6.308318e-04 -8.601743e-04 -1.042242e-03 -1.183949e-03 #>  [86] -1.291907e-03 -1.372776e-03 -1.432545e-03 -1.475938e-03 -1.507279e-03 #>  [91] -1.529745e-03 -1.545686e-03 -1.557020e-03 -1.564807e-03 -1.570228e-03 #>  [96] -1.573859e-03 -1.576272e-03 -1.577913e-03 -1.579128e-03 -1.579942e-03 #>  #> $pf[[6]] #>   [1] -4.183347e-03 -4.259470e-03 -4.351226e-03 -4.456273e-03 -4.573669e-03 #>   [6] -4.703013e-03 -4.844480e-03 -4.998543e-03 -5.165984e-03 -5.324561e-03 #>  [11] -5.470204e-03 -5.599517e-03 -5.709561e-03 -5.798802e-03 -5.865830e-03 #>  [16] -5.910103e-03 -5.931463e-03 -5.929847e-03 -5.905347e-03 -5.857247e-03 #>  [21] -5.784111e-03 -5.684212e-03 -5.555212e-03 -5.394062e-03 -5.197739e-03 #>  [26] -4.963085e-03 -4.687070e-03 -4.367157e-03 -4.001631e-03 -3.589849e-03 #>  [31] -3.132058e-03 -2.630234e-03 -2.087871e-03 -1.509889e-03 -9.030670e-04 #>  [36] -2.755882e-04  3.630271e-04  1.001652e-03  1.628781e-03  2.232226e-03 #>  [41]  2.799470e-03  3.318576e-03  3.777926e-03  4.167345e-03  4.478022e-03 #>  [46]  4.703052e-03  4.837542e-03  4.879124e-03  4.827550e-03  4.685509e-03 #>  [51]  4.457689e-03  4.151441e-03  3.775935e-03  3.342100e-03  2.862447e-03 #>  [56]  2.350088e-03  1.818949e-03  1.282823e-03  7.548515e-04  2.476213e-04 #>  [61] -2.277179e-04 -6.616145e-04 -1.046545e-03 -1.376779e-03 -1.648747e-03 #>  [66] -1.860822e-03 -2.013634e-03 -2.109203e-03 -2.151420e-03 -2.145104e-03 #>  [71] -2.096486e-03 -2.011778e-03 -1.897823e-03 -1.761553e-03 -1.608992e-03 #>  [76] -1.446507e-03 -1.279362e-03 -1.111802e-03 -9.478790e-04 -7.903047e-04 #>  [81] -6.415165e-04 -5.028506e-04 -3.754403e-04 -2.595361e-04 -1.552209e-04 #>  [86] -6.231186e-05  1.963637e-05  9.150507e-05  1.538251e-04  2.074038e-04 #>  [91]  2.531553e-04  2.920646e-04  3.231878e-04  3.482529e-04  3.682116e-04 #>  [96]  3.839918e-04  3.967056e-04  4.067277e-04  4.147241e-04  4.208017e-04 #>  #> $pf[[7]] #>   [1] -0.010292534 -0.010216312 -0.010124461 -0.010019223 -0.009901537 #>   [6] -0.009771708 -0.009629466 -0.009474240 -0.009304955 -0.009143455 #>  [11] -0.008993622 -0.008858162 -0.008739228 -0.008637469 -0.008553024 #>  [16] -0.008484958 -0.008431561 -0.008390538 -0.008359242 -0.008335441 #>  [21] -0.008316937 -0.008302024 -0.008288918 -0.008276659 -0.008264169 #>  [26] -0.008250719 -0.008235761 -0.008218974 -0.008199934 -0.008178455 #>  [31] -0.008154389 -0.008127488 -0.008097507 -0.008064392 -0.008027972 #>  [36] -0.007988275 -0.007945214 -0.007898701 -0.007848855 -0.007795804 #>  [41] -0.007739903 -0.007681328 -0.007620499 -0.007557970 -0.007494340 #>  [46] -0.007430346 -0.007366763 -0.007304488 -0.007244325 -0.007187297 #>  [51] -0.007134211 -0.007086070 -0.007043757 -0.007008043 -0.006979792 #>  [56] -0.006959575 -0.006948255 -0.006946420 -0.006954465 -0.006972895 #>  [61] -0.007002097 -0.007042236 -0.007093315 -0.007155144 -0.007227413 #>  [66] -0.007309473 -0.007400313 -0.007498978 -0.007604077 -0.007714123 #>  [71] -0.007827487 -0.007942545 -0.008057851 -0.008171771 -0.008283238 #>  [76] -0.008390991 -0.008494143 -0.008592303 -0.008684847 -0.008771699 #>  [81] -0.008852718 -0.008927953 -0.008997520 -0.009061745 -0.009120680 #>  [86] -0.009174482 -0.009223400 -0.009267664 -0.009307450 -0.009342881 #>  [91] -0.009374222 -0.009401809 -0.009424302 -0.009442934 -0.009458280 #>  [96] -0.009470789 -0.009481213 -0.009489647 -0.009496457 -0.009501790 #>  #>  #> $residue #>   [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>"},{"path":"https://shubhra-opensource.github.io/LMD/reference/lmd_shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"LMD Shiny — lmd_shiny","title":"LMD Shiny — lmd_shiny","text":"Shiny Dashboard plotting Product Functions (PFs) Residue","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/lmd_shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LMD Shiny — lmd_shiny","text":"","code":"lmd_shiny()"},{"path":"https://shubhra-opensource.github.io/LMD/reference/lmd_shiny.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"LMD Shiny — lmd_shiny","text":"Shubhra Prakash, shubhraprakash279@gmail.com","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/local_mean_and_envelope.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Mean and Envelope — local_mean_and_envelope","title":"Local Mean and Envelope — local_mean_and_envelope","text":"Method finding Local Mean Envelope","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/local_mean_and_envelope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Mean and Envelope — local_mean_and_envelope","text":"","code":"local_mean_and_envelope(signal, extrema)"},{"path":"https://shubhra-opensource.github.io/LMD/reference/local_mean_and_envelope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Mean and Envelope — local_mean_and_envelope","text":"signal Signal values (Numeric | vector) extrema indexes extreme values","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/local_mean_and_envelope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Mean and Envelope — local_mean_and_envelope","text":"mean, envelope smoothed mean envelope values","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/local_mean_and_envelope.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Local Mean and Envelope — local_mean_and_envelope","text":"https://pypi.org/project/PyLMD/","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/local_mean_and_envelope.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Local Mean and Envelope — local_mean_and_envelope","text":"Shubhra Prakash, shubhraprakash279@gmail.com","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/local_mean_and_envelope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Mean and Envelope — local_mean_and_envelope","text":"","code":"signal = sin(1:10) extrema = c(1 , 2,  5,  8, 10) local_mean_and_envelope(signal, extrema) #> $mean #>  [1]  0.875384206  0.425285391 -0.024813424 -0.024813424 -0.004798219 #>  [6]  0.015216986  0.015216986  0.118942777  0.222668568  0.222668568 #>  #> $ma #>  [1]  0.7253513  0.4252854  0.0877113 -0.0198096 -0.0047982  0.0102132 #>  [7]  0.0411484  0.1189428  0.1967371  0.2226686 #>  #> $enve #>  [1] 0.03391322 0.48401204 0.93411085 0.93411085 0.95412606 0.97414126 #>  [7] 0.97414126 0.87041547 0.76668968 0.76668968 #>  #> $enve_sm #>  [1] 0.1839462 0.4840120 0.8215861 0.9391147 0.9541261 0.9691375 0.9482098 #>  [8] 0.8704155 0.7926211 0.7666897 #>"},{"path":"https://shubhra-opensource.github.io/LMD/reference/moving_average_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Moving Average — moving_average_smooth","title":"Weighted Moving Average — moving_average_smooth","text":"Weighted Moving Average Smoothing","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/moving_average_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Moving Average — moving_average_smooth","text":"","code":"moving_average_smooth(signal, window, max_smooth_iteration = 12)"},{"path":"https://shubhra-opensource.github.io/LMD/reference/moving_average_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Moving Average — moving_average_smooth","text":"signal Signal values (Numeric | vector) window filter weights smoothing (Numeric | vector) max_smooth_iteration Maximum number iterations moving average algorithm (Integer)","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/moving_average_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Moving Average — moving_average_smooth","text":"smooth signal","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/moving_average_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted Moving Average — moving_average_smooth","text":"Weighted Moving Average Smoothing used smooth en mean envelope signal","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/moving_average_smooth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Weighted Moving Average — moving_average_smooth","text":"https://pypi.org/project/PyLMD/","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/moving_average_smooth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Weighted Moving Average — moving_average_smooth","text":"Shubhra Prakash, shubhraprakash279@gmail.com","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/moving_average_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted Moving Average — moving_average_smooth","text":"","code":"x=0:100 y = (2 / 3 )* sin(x * 30) + (2 / 3) * sin(x * 17.5) + (4 / 5) *cos(x * 2) plot(y,type=\"l\")  wma=moving_average_smooth(y,5) plot(wma,type=\"l\")"},{"path":"https://shubhra-opensource.github.io/LMD/reference/plot_lmd.html","id":null,"dir":"Reference","previous_headings":"","what":"LMD Plot — plot_lmd","title":"LMD Plot — plot_lmd","text":"Method plotting Product Functions (PFs) Residue","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/plot_lmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LMD Plot — plot_lmd","text":"","code":"plot_lmd(   lmd_obj,   max_pf = length(lmd_obj[[\"pf\"]]),   show_residue = TRUE,   pricolor_plot = \"midnightblue\",   line_size_plot = 1 )"},{"path":"https://shubhra-opensource.github.io/LMD/reference/plot_lmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LMD Plot — plot_lmd","text":"lmd_obj LMD object created LMD function max_pf Number PFs Plot show_residue Whether plot residue pricolor_plot color plots line_size_plot Size line ggplot","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/plot_lmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LMD Plot — plot_lmd","text":"ggplot plot Product Functions (PFs) Residue","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/plot_lmd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"LMD Plot — plot_lmd","text":"Shubhra Prakash, shubhraprakash279@gmail.com","code":""},{"path":"https://shubhra-opensource.github.io/LMD/reference/plot_lmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LMD Plot — plot_lmd","text":"","code":"x=1:100 y = (2 / 3 )* sin(x * 30) + (2 / 3) * sin(x * 17.5) + (4 / 5) *cos(x * 2) plot_lmd(lmd(y))"},{"path":[]},{"path":[]},{"path":"https://shubhra-opensource.github.io/LMD/news/index.html","id":"shiny-app-1-1-0","dir":"Changelog","previous_headings":"version 1.1.0","what":"Shiny App","title":"LMD 1.1.0","text":"Added shiny app easy usage","code":""},{"path":[]},{"path":"https://shubhra-opensource.github.io/LMD/news/index.html","id":"first-release-1-1-0","dir":"Changelog","previous_headings":"version 1.0.0","what":"First Release","title":"LMD 1.1.0","text":"Added LMD supporting functions","code":""}]
